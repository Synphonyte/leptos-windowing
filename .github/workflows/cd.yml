on:
  push:
    # Pattern matched against refs/tags
    tags:
      - 'leptos-windowing-v*'
      - 'leptos-pagination-v*'
  workflow_dispatch:
    inputs:
      crate:
        description: 'Crate to publish'
        required: true
        type: choice
        options:
          - leptos-windowing
          - leptos-pagination

name: CD

permissions: write-all

jobs:
  determine-crate:
    name: Determine Crate from Tag
    runs-on: ubuntu-latest
    outputs:
      crate: ${{ steps.extract.outputs.crate }}
    steps:
      - name: Extract crate from tag or input
        id: extract
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "crate=${{ github.event.inputs.crate }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/leptos-windowing-v* ]]; then
            echo "crate=leptos-windowing" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/leptos-pagination-v* ]]; then
            echo "crate=leptos-pagination" >> $GITHUB_OUTPUT
          else
            echo "Invalid tag format. Use leptos-windowing-v* or leptos-pagination-v*"
            exit 1
          fi

  test:
    name: Test ${{ needs.determine-crate.outputs.crate }}
    runs-on: ubuntu-latest
    needs: determine-crate
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: rustfmt, clippy, rust-src
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.determine-crate.outputs.crate }}

      - name: Check if the README is up to date.
        run: |
          cargo install cargo-rdme
          cargo rdme --check
        working-directory: ${{ needs.determine-crate.outputs.crate }}
      - name: Check formatting
        run: cargo fmt --check
        working-directory: ${{ needs.determine-crate.outputs.crate }}
      - name: Clippy
        run: cargo clippy --tests -- -D warnings
        working-directory: ${{ needs.determine-crate.outputs.crate }}
      - name: Run tests
        run: cargo test
        working-directory: ${{ needs.determine-crate.outputs.crate }}

  publish:
    name: Publish ${{ needs.determine-crate.outputs.crate }}
    runs-on: ubuntu-latest
    needs: [determine-crate, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: rustfmt, clippy, rust-src
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.determine-crate.outputs.crate }}

      - name: Handle dependency for leptos-pagination
        if: needs.determine-crate.outputs.crate == 'leptos-pagination'
        run: |
          # Check if leptos-windowing is already published with the current version
          WINDOWING_VERSION=$(grep 'version = "' ../leptos-windowing/Cargo.toml | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          echo "Checking if leptos-windowing $WINDOWING_VERSION is available on crates.io..."

          # Try to fetch the crate info, if it fails, the version doesn't exist yet
          if ! cargo search leptos-windowing --limit 1 | grep -q "leptos-windowing = \"$WINDOWING_VERSION\""; then
            echo "leptos-windowing $WINDOWING_VERSION not found on crates.io. Using path dependency."
          else
            echo "leptos-windowing $WINDOWING_VERSION found on crates.io. Updating dependency."
            sed -i 's/leptos-windowing = { version = "[^"]*", path = "[^"]*" }/leptos-windowing = "'"$WINDOWING_VERSION"'"/' Cargo.toml
          fi
        working-directory: ${{ needs.determine-crate.outputs.crate }}

      - name: Publish ${{ needs.determine-crate.outputs.crate }}
        run: cargo publish --no-verify
        working-directory: ${{ needs.determine-crate.outputs.crate }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-crate, publish]
    steps:
      - uses: actions/checkout@v4

      - uses: CSchoel/release-notes-from-changelog@v1
        with:
          working-directory: ${{ needs.determine-crate.outputs.crate }}

      - name: Create Release using GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create
          -d
          -F RELEASE.md
          -t "${{ needs.determine-crate.outputs.crate }} ${GITHUB_REF#refs/*/}"
          ${GITHUB_REF#refs/*/}
